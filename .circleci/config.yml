version: 2.1

parameters:
  force-rebuild:
    type: boolean
    default: false
    description: "Rebuild all steps regardless of cache"

commands:
  setup-gcr:
    steps:
      - run:
          name: "Setup GCR"
          command: |
            echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://us-docker.pkg.dev
            gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://gcr.io
  install-python-deps:
    parameters:
    steps:
      - restore_cache:
          key: python-{{ checksum "requirements.txt" }}
      - run: pip3 install -r requirements.txt
      - save_cache:
          key: python-{{ checksum "requirements.txt" }}
          paths:
            - /home/circleci/.cache/pip
            - /home/circleci/.pyenv/versions/
            - /home/circleci/.local/lib/
  install-go-tools:
    parameters:
      cache-key:
        type: string
        default: v1-go-tools-{{ checksum "./scripts/go_tools.sh" }}
    steps:
      - restore_cache:
          key: << parameters.cache-key >>
      - run:
          name: Install go tools
          command: |
            make go-tools
      - save_cache:
          key: << parameters.cache-key >>
          paths:
            - /home/circleci/.go_workspace/bin
  install-baur:
    parameters:
      baur-version:
        type: string
        default: 2.0.0
      baur-path:
        type: string
        default: /home/circleci/bin/baur
    steps:
      - restore_cache:
          key: v2-baur-<< parameters.baur-version >>
      - run:
          name: Install baur << parameters.baur-version >>
          command: |
            export BAUR_PATH=<< parameters.baur-path >>
            export BAUR_VERSION="<< parameters.baur-version >>"
            if test -f "$BAUR_PATH"; then
                echo "$BAUR_PATH exists."
                chmod +x $BAUR_PATH
                exit 0
            fi

            wget -c https://github.com/simplesurance/baur/releases/download/v$BAUR_VERSION/baur-linux_amd64-$BAUR_VERSION.tar.xz && tar -xf baur-linux_amd64-$BAUR_VERSION.tar.xz && chmod +x baur && \
                      sudo mv baur $BAUR_PATH
      - save_cache:
          key: v2-baur-<< parameters.baur-version >>
          paths:
            - << parameters.baur-path >>
# Define the jobs we want to run for this project
jobs:
  build:
    parameters:
      build-log-path:
        type: string
        default: /home/circleci/build-log
      tests-path:
        type: string
        default: /home/circleci/tests-results
    resource_class: large
    machine:
      image: ubuntu-2004:202104-01
    environment:
      FORCE_REBUILD: << pipeline.parameters.force-rebuild >>
      LOG_OUTPUT_DIR: << parameters.build-log-path >>
      TEST_OUTPUT_DIR: << parameters.tests-path >>
      GOLANGCI: false # keep it disabled for now
    steps:
      - checkout
      - install-python-deps
      - install-go-tools
      - setup-gcr
      - install-baur
      - run:
          name: "Run cloud_sql_proxy"
          background: true
          command: |
            docker run -d \
              -v ${HOME}/gcloud-service-key.json:/config \
              -p 127.0.0.1:5432:5432 \
              gcr.io/cloudsql-docker/gce-proxy:1.19.1 /cloud_sql_proxy \
              -instances=$BAUR_DB_INSTANCE=tcp:0.0.0.0:5432 \
              -credential_file=/config
      - run:
          name: "Wait for postgres to become available"
          command: |
            count=0
            until nc -z 127.0.0.1 5432 || (( count++ >= 8 )); do echo "Waiting for postgres.. $count"; sleep 1; done
      - run:
          name: Build steps
          command: |
            export PATH=/home/circleci/bin:$PATH
            export BAUR_POSTGRESQL_URL="$BAUR_V2_POSTGRESQL_URL"
            mkdir -p $LOG_OUTPUT_DIR
            mkdir -p $TEST_OUTPUT_DIR
            make all
      - store_artifacts:
          path: << parameters.build-log-path >>
      - store_test_results:
          path: << parameters.tests-path >>
      - store_artifacts:
          path: << parameters.tests-path >>

  build-manifests:
    machine:
      image: ubuntu-2004:202104-01
    steps:
      - setup-gcr
      - checkout
      - install-python-deps
      - run: TAG=${CIRCLE_TAG} BRANCH=${CIRCLE_BRANCH} make indexfile
      - run: TAG=${CIRCLE_TAG} BRANCH=${CIRCLE_BRANCH} make validate-vendors
      - store_artifacts:
          path: out
      - store_artifacts:
          path: vendors
      - persist_to_workspace:
          root: .
          paths:
            - out
            - Makefile
            - vendors

  publish-manifest:
    docker:
      - image: google/cloud-sdk
    working_directory: /tmp/workspace
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run: echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
      - run: TAG=${CIRCLE_TAG} BRANCH=${CIRCLE_BRANCH} make publish-manifests-no-deps
      - run: TAG=${CIRCLE_TAG} BRANCH=${CIRCLE_BRANCH} make publish-vendors

# Orchestrate our job run sequence
workflows:
  build:
    jobs:
      - build:
          context: development
          filters:
            tags:
              only: /.*/
      - build-manifests:
          context: development
          filters:
            tags:
              only: /.*/
      - publish-manifest:
          context: development
          requires:
            - build-manifests
            - build
          filters:
            branches:
              only:
                master