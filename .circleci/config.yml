version: 2.1

parameters:
  force-rebuild:
    type: boolean
    default: false
    description: "Rebuild all steps regardless of cache"

commands:
  setup-gcr:
    steps:
      - run:
          name: "Setup GCR"
          command: |
            echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://us-docker.pkg.dev
            gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://gcr.io

# Define the jobs we want to run for this project
jobs:
  build:
    parameters:
      build-log-path:
        type: string
        default: /home/circleci/build-log
    resource_class: large
    docker:
      - image: gcr.io/stackpulse/circleci-steps-builder:1.16
        auth:
          username: _json_key
          password: $GCLOUD_SERVICE_KEY
    environment:
      FORCE_REBUILD: << pipeline.parameters.force-rebuild >>
      LOG_OUTPUT_DIR: << parameters.build-log-path >>
    steps:
      - setup_remote_docker
      - checkout
      - setup-gcr
      - run:
          name: "Run cloud_sql_proxy"
          background: true
          command: |
            cloud_sql_proxy -instances=$BAUR_DB_INSTANCE=tcp:127.0.0.1:5432 -credential_file=${HOME}/gcloud-service-key.json
      - run:
          name: "Wait for postgres to become available"
          command: |
            count=0
            until pg_isready -d $BAUR_POSTGRESQL_URL || (( count++ >= 8 )); do sleep 1; done
      - run:
          name: Build steps
          command: |
            mkdir -p $LOG_OUTPUT_DIR
            make all
      - store_artifacts:
          path: << parameters.build-log-path >>

  build-manifests:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - setup-gcr
      - run: pyenv global 3.7.0
      - run: pip install pyyaml
      - checkout
      - run: TAG=${CIRCLE_TAG} BRANCH=${CIRCLE_BRANCH} make indexfile
      - run: TAG=${CIRCLE_TAG} BRANCH=${CIRCLE_BRANCH} make validate-vendors
      - store_artifacts:
          path: out
      - store_artifacts:
          path: vendors
      - persist_to_workspace:
          root: .
          paths:
            - out
            - Makefile
            - vendors

  publish-manifest:
    docker:
      - image: google/cloud-sdk
    working_directory: /tmp/workspace
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run: echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
      - run: TAG=${CIRCLE_TAG} BRANCH=${CIRCLE_BRANCH} make publish-manifests-no-deps
      - run: TAG=${CIRCLE_TAG} BRANCH=${CIRCLE_BRANCH} make publish-vendors

# Orchestrate our job run sequence
workflows:
  build:
    jobs:
      - build:
          context: development
          filters:
            tags:
              only: /.*/
      - build-manifests:
          context: development
          filters:
            tags:
              only: /.*/
      - publish-manifest:
          context: development
          requires:
            - build-manifests
            - build
          filters:
            branches:
              only:
                master